*.include "C:\Users\kevin\Desktop\my THING\school\SUTD\ISTD Term 1\50.002 Computation Structures\jsim\nominal.jsim" 
*.include "C:\Users\kevin\Desktop\my THING\school\SUTD\ISTD Term 1\50.002 Computation Structures\jsim\stdcell.jsim" 
*.include "C:\Users\kevin\Desktop\my THING\school\SUTD\ISTD Term 1\50.002 Computation Structures\jsim\lab6ctl.jsim"

.subckt ctl reset id[31:26] ra2sel bsel 
+ alufn[5:0] wdsel[1:0] werf moe wr pcsel[2:0]
+ asel wasel z irqnew

Xctl vdd 0 0 id[31:26] // one read port 
+ ipcsel2 xpcsel[1:0] iwasel asel ra2sel bsel alufn[5:0] 
+ iwdsel[1:0] iwerf moe xwr 
+ $memory width=18 nlocations=64 contents=( 
	+ 0b000000000000000000 // opcode=0b000000 
	+ 0b000000000000000000 // opcode=0b000001 
	+ 0b000000000000000000
	+ 0b000000000000000000
	+ 0b000000000000000000
	+ 0b000000000000000000
	+ 0b000000000000000000
	+ 0b000000000000000000
	+ 0b000000000000000000
	+ 0b000000000000000000
	+ 0b000000000000000000
	+ 0b000000000000000000
	+ 0b000000000000000000
	+ 0b000000000000000000
	+ 0b000000000000000000
	+ 0b000000000000000000
	+ 0b000000000000000000
	+ 0b000000000000000000
	+ 0b000000000000000000
	+ 0b000000000000000000
	+ 0b000000000000000000
	+ 0b000000000000000000
	+ 0b000000000000000000
	+ 0b000000000000000000 // opcode=0b010111
	+ 0b000000100000010110 // opcode=LD
	+ 0b000001100000000001 // ST
	+ 0b000000000000000000
	+ 0b010000000000000100 //JMP
	+ 0b000000000000000000
	+ 0b001000000000000100 //BEQ
	+ 0b001000000000000100 //BNE
	+ 0b000010001101010110 //LDR
 	+ 0b000000000000001100 //ADD
	+ 0b000000000000101100 //SUB
	+ 0b000000000000000000 //MUL
	+ 0b000000000000000000 //DIV
	+ 0b000000011001101100 //CMPEQ
	+ 0b000000011010101100 //CMPLT
	+ 0b000000011011101100 //CMPLE
	+ 0b000000000000000000 //100111
	+ 0b000000001100001100 //AND
	+ 0b000000001111001100 //OR
	+ 0b000000001011001100 //XOR
	+ 0b000000000000000000
	+ 0b000000010000001100 //SHL
	+ 0b000000010000101100 //SHR
	+ 0b000000010001101100 //SRA
	+ 0b000000000000000000
	+ 0b000000100000001100 //ADDC
	+ 0b000000100000101100 //SUBC
	+ 0b000000000000000000 //MULC
	+ 0b000000000000000000 //DIVC
	+ 0b000000111001101100//CMPEQC
	+ 0b000000111010101100//CMPLTC
	+ 0b000000111011101100//CMPLEC
	+ 0b000000000000000000
	+ 0b000000101100001100//ANDC
	+ 0b000000101111001100//ORC
	+ 0b000000101011001100//XORC
	+ 0b000000000000000000
	+ 0b000000110000001100//SHLC
	+ 0b000000110000101100//SHRC
	+ 0b000000110001101100//SRAC
	+ 0b000000000000000000 //111111
	+ )

Xresetinvert reset resetinvert inverter
Xand xwr resetinvert iwr and2

Xzinvert z zinv inverter

*choose pcsel0 for BEQ,BNE
*id26=0(BNE) xz=zinv
Xchoosepcsel id26 zinv z xz mux2 
*only for BEQ,BNE (pcsel1,0 == 0,1)
Xonlybeq xpcsel0#2 xpcsel1#2 xpcsel[1:0] 0 xz xpcsel[1:0] xpcsel[1:0] ipcsel[1:0] mux4

*PCSEL = 4 when IRQNEW = 1
Xinterruptpcsel1 irqnew ipcsel2 vdd pcsel2 mux2
Xinterruptpcsel2 irqnew#2 ipcsel[1:0] 0#2 pcsel[1:0] mux2

*WASEL TO 1 when IRQNEW = 1
Xinterruptwasel irqnew iwasel vdd wasel mux2

*WERF TO 1 when IRQNEW = 1
Xinterruptwerf irqnew iwerf vdd werf mux2

*WDSEL TO 0 when IRQNEW = 1
Xinterruptwdsel irqnew#2 iwdsel[1:0] 0#2 wdsel[1:0] mux2

*WR TO 0 when IRQNEW = 1
Xinterruptwr irqnew iwr 0 wr mux2

.ends